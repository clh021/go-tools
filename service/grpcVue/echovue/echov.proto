syntax = "proto3"; // 要使用的 protocol buffer 版本

// package grpc.gateway.testing; // for name space
package testing2; // for name space 修改这一行不仅仅影响 javascript request route 也影响 golang 生成服务

option go_package = "test/service/grpcVue/echovue"; // generated code 的 full Go import path

// 使用 message 定义资料交换的格式

message Empty {} 

message EchoRequest {
  string message = 1;
}

message EchoResponse {
  string message = 1;
  int32 message_count = 2;
}

// 服务器端流回显的请求类型。
message ServerStreamingEchoRequest {
  // 服务器流请求的消息字符串。
  string message = 1;

  // 服务端之前要生成的消息总数
  // 关闭流；默认值为 10。
  int32 message_count = 2;

  // 两个服务器消息之间的间隔（毫秒）。服务器实现
  // 可能会强制执行一些最小间隔（例如 100 毫秒）以避免消息溢出。
  int32 message_interval = 3;
}

// 服务器流式响应的响应类型。
message ServerStreamingEchoResponse {
  // 响应消息。
  string message = 1;
}

// 客户端流式回显的请求类型。
message ClientStreamingEchoRequest {
  // 特殊值 "" 表示没有更多消息。
  string message = 1;
}

// 客户端流回显的响应类型。
message ClientStreamingEchoResponse {
  // 已收到的客户端消息总数。
  int32 message_count = 1;
}

// 使用 service 定义呼叫API 的方法名称
// 一个简单的回显服务。
service EchoService {
  // 一个请求，一个响应
  // 服务器按原样返回客户端消息。
  rpc Echo(EchoRequest) returns (EchoResponse);

  // 发回中止状态。
  rpc EchoAbort(EchoRequest) returns (EchoResponse) {}

  // 一个空请求，零处理，后接一个空响应
  //（做消息序列化的最小努力）。
  rpc NoOp(Empty) returns (Empty);

  // 一个请求后跟一系列响应（流式下载）。
  // 服务器会重复返回相同的客户端消息。
  rpc ServerStreamingEcho(ServerStreamingEchoRequest)
      returns (stream ServerStreamingEchoResponse);

  // 一个请求后跟一系列响应（流式下载）。
  // 服务器直接中止。
  rpc ServerStreamingEchoAbort(ServerStreamingEchoRequest)
      returns (stream ServerStreamingEchoResponse) {}

  // 一系列请求，然后是一个响应（流式上传）。
  // 服务器返回消息的总数作为结果。
  rpc ClientStreamingEcho(stream ClientStreamingEchoRequest)
      returns (ClientStreamingEchoResponse);

  // 服务器立即回显每条消息的一系列请求。
  // 服务器按顺序返回相同的客户端消息。
  // 例如，这就是语音 API 的工作方式。
  rpc FullDuplexEcho(stream EchoRequest) returns (stream EchoResponse);

  // 一个请求序列，后面跟着一个响应序列。
  // 服务器缓存所有客户端消息，然后返回相同的
  // 客户端半关闭流后，客户端消息一一对应。
  // 这就是图像识别 API 的工作方式。
  rpc HalfDuplexEcho(stream EchoRequest) returns (stream EchoResponse);
}
